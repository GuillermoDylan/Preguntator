{"ast":null,"code":"// function shuffleArray(array) {\n// \t// Implementación del algoritmo de Fisher-Yates para desordenar un array\n// \tfor (let i = array.length - 1; i > 0; i--) {\n// \t\tconst j = Math.floor(Math.random() * (i + 1));\n// \t\t[array[i], array[j]] = [array[j], array[i]];\n// \t}\n// }\n\n// export function desordenarPreguntasRespuestas(texto) {\n// \tconst lines = texto.split(\"\\n\");\n// \tconst preguntasRespuestas = [];\n// \tlet preguntaActual = null;\n\n// \tfor (let i = 0; i < lines.length; i++) {\n// \t\tconst line = lines[i].trim();\n\n// \t\tif (line.startsWith(\"?:\")) {\n// \t\t\tpreguntaActual = {\n// \t\t\t\tpregunta: line.substring(3), // Eliminar el prefijo '?:'\n// \t\t\t\trespuestas: [],\n// \t\t\t\trespuestasCorrectas: [],\n// \t\t\t};\n// \t\t\tpreguntasRespuestas.push(preguntaActual);\n// \t\t} else if (line.startsWith(\"$\")) {\n// \t\t\t//Es una respuesta correcta\n// \t\t\tlet respuesta = line.substring(1); // Eliminar el prefijo '$'\n// \t\t\trespuesta = respuesta.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n// \t\t\tpreguntaActual.respuestas.push(respuesta);\n// \t\t\tpreguntaActual.respuestasCorrectas.push(respuesta);\n// \t\t} else if (\n// \t\t\t//respuesta normal\n// \t\t\tline.startsWith(\"a.\") ||\n// \t\t\tline.startsWith(\"b.\") ||\n// \t\t\tline.startsWith(\"c.\") ||\n// \t\t\tline.startsWith(\"d.\")\n// \t\t) {\n// \t\t\tconst respuesta = line.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n// \t\t\tpreguntaActual.respuestas.push(respuesta);\n// \t\t}\n// \t}\n\n// \t// Desordenar el orden de las preguntas\n// \tshuffleArray(preguntasRespuestas);\n\n// \t// Desordenar las respuestas dentro de cada pregunta\n// \tpreguntasRespuestas.forEach((pregunta) => {\n// \t\tshuffleArray(pregunta.respuestas);\n// \t});\n\n// \t// Generar el nuevo texto con las preguntas y respuestas desordenadas\n// \tlet nuevoTexto = \"\";\n// \tlet cont = 1;\n// \tpreguntasRespuestas.forEach((pregunta, index) => {\n// \t\tnuevoTexto += `${cont}. ${pregunta.pregunta}\\n`;\n// \t\tpregunta.respuestas.forEach((respuesta, i) => {\n// \t\t\tconst respuestaIndex = String.fromCharCode(97 + i); // Convierte el índice a su equivalente en caracteres (a, b, c, ...)\n// \t\t\tconst esRespuestaCorrecta =\n// \t\t\t\tpregunta.respuestasCorrectas.includes(respuesta);\n// \t\t\tnuevoTexto += `  ${\n// \t\t\t\tesRespuestaCorrecta ? \"$\" : \"\"\n// \t\t\t}${respuestaIndex}.${respuesta}\\n`;\n// \t\t});\n// \t\tnuevoTexto += `\\n`;\n// \t\tcont++;\n// \t});\n\n// \treturn nuevoTexto;\n// }\n\nfunction shuffleArray(array) {\n  // Implementación del algoritmo de Fisher-Yates para desordenar un array\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nexport function desordenarPreguntasRespuestas(texto) {\n  const lines = texto.split(\"\\n\");\n  const preguntasRespuestas = [];\n  let preguntaActual = null;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.startsWith(\"?:\")) {\n      preguntaActual = {\n        pregunta: line.substring(3),\n        // Eliminar el prefijo '?:'\n        respuestas: [],\n        respuestasCorrectas: []\n      };\n      preguntasRespuestas.push(preguntaActual);\n    } else if (line.startsWith(\"$\")) {\n      // Es una respuesta correcta\n      let respuesta = line.substring(1); // Eliminar el prefijo '$'\n      respuesta = respuesta.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n      preguntaActual.respuestas.push(respuesta);\n      preguntaActual.respuestasCorrectas.push(respuesta);\n    } else if (\n    // Respuesta normal\n    line.startsWith(\"a.\") || line.startsWith(\"b.\") || line.startsWith(\"c.\") || line.startsWith(\"d.\") || line.startsWith(\"e.\") || line.startsWith(\"f.\") || line.startsWith(\"g.\")) {\n      const respuesta = line.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n      preguntaActual.respuestas.push(respuesta);\n    }\n  }\n\n  // Desordenar el orden de las preguntas\n  shuffleArray(preguntasRespuestas);\n\n  // Desordenar las respuestas dentro de cada pregunta\n  preguntasRespuestas.forEach(pregunta => {\n    shuffleArray(pregunta.respuestas);\n  });\n\n  // Generar el nuevo objeto con las preguntas y respuestas desordenadas\n  const preguntasRespuestasDesordenadas = preguntasRespuestas.map((pregunta, index) => {\n    const respuestasDesordenadas = pregunta.respuestas.map((respuesta, i) => {\n      const respuestaIndex = String.fromCharCode(97 + i); // Convierte el índice a su equivalente en caracteres (a, b, c, ...)\n      const esRespuestaCorrecta = pregunta.respuestasCorrectas.includes(respuesta);\n      return {\n        respuesta: respuesta,\n        esRespuestaCorrecta: esRespuestaCorrecta\n      };\n    });\n    return {\n      pregunta: pregunta.pregunta,\n      respuestas: respuestasDesordenadas\n    };\n  });\n  return preguntasRespuestasDesordenadas;\n}","map":{"version":3,"names":["shuffleArray","array","i","length","j","Math","floor","random","desordenarPreguntasRespuestas","texto","lines","split","preguntasRespuestas","preguntaActual","line","trim","startsWith","pregunta","substring","respuestas","respuestasCorrectas","push","respuesta","forEach","preguntasRespuestasDesordenadas","map","index","respuestasDesordenadas","respuestaIndex","String","fromCharCode","esRespuestaCorrecta","includes"],"sources":["/Users/blanc/Desktop/Preguntador/preguntador/src/functions/fileFunctions.js"],"sourcesContent":["// function shuffleArray(array) {\n// \t// Implementación del algoritmo de Fisher-Yates para desordenar un array\n// \tfor (let i = array.length - 1; i > 0; i--) {\n// \t\tconst j = Math.floor(Math.random() * (i + 1));\n// \t\t[array[i], array[j]] = [array[j], array[i]];\n// \t}\n// }\n\n// export function desordenarPreguntasRespuestas(texto) {\n// \tconst lines = texto.split(\"\\n\");\n// \tconst preguntasRespuestas = [];\n// \tlet preguntaActual = null;\n\n// \tfor (let i = 0; i < lines.length; i++) {\n// \t\tconst line = lines[i].trim();\n\n// \t\tif (line.startsWith(\"?:\")) {\n// \t\t\tpreguntaActual = {\n// \t\t\t\tpregunta: line.substring(3), // Eliminar el prefijo '?:'\n// \t\t\t\trespuestas: [],\n// \t\t\t\trespuestasCorrectas: [],\n// \t\t\t};\n// \t\t\tpreguntasRespuestas.push(preguntaActual);\n// \t\t} else if (line.startsWith(\"$\")) {\n// \t\t\t//Es una respuesta correcta\n// \t\t\tlet respuesta = line.substring(1); // Eliminar el prefijo '$'\n// \t\t\trespuesta = respuesta.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n// \t\t\tpreguntaActual.respuestas.push(respuesta);\n// \t\t\tpreguntaActual.respuestasCorrectas.push(respuesta);\n// \t\t} else if (\n// \t\t\t//respuesta normal\n// \t\t\tline.startsWith(\"a.\") ||\n// \t\t\tline.startsWith(\"b.\") ||\n// \t\t\tline.startsWith(\"c.\") ||\n// \t\t\tline.startsWith(\"d.\")\n// \t\t) {\n// \t\t\tconst respuesta = line.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n// \t\t\tpreguntaActual.respuestas.push(respuesta);\n// \t\t}\n// \t}\n\n// \t// Desordenar el orden de las preguntas\n// \tshuffleArray(preguntasRespuestas);\n\n// \t// Desordenar las respuestas dentro de cada pregunta\n// \tpreguntasRespuestas.forEach((pregunta) => {\n// \t\tshuffleArray(pregunta.respuestas);\n// \t});\n\n// \t// Generar el nuevo texto con las preguntas y respuestas desordenadas\n// \tlet nuevoTexto = \"\";\n// \tlet cont = 1;\n// \tpreguntasRespuestas.forEach((pregunta, index) => {\n// \t\tnuevoTexto += `${cont}. ${pregunta.pregunta}\\n`;\n// \t\tpregunta.respuestas.forEach((respuesta, i) => {\n// \t\t\tconst respuestaIndex = String.fromCharCode(97 + i); // Convierte el índice a su equivalente en caracteres (a, b, c, ...)\n// \t\t\tconst esRespuestaCorrecta =\n// \t\t\t\tpregunta.respuestasCorrectas.includes(respuesta);\n// \t\t\tnuevoTexto += `  ${\n// \t\t\t\tesRespuestaCorrecta ? \"$\" : \"\"\n// \t\t\t}${respuestaIndex}.${respuesta}\\n`;\n// \t\t});\n// \t\tnuevoTexto += `\\n`;\n// \t\tcont++;\n// \t});\n\n// \treturn nuevoTexto;\n// }\n\nfunction shuffleArray(array) {\n\t// Implementación del algoritmo de Fisher-Yates para desordenar un array\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[array[i], array[j]] = [array[j], array[i]];\n\t}\n}\n\nexport function desordenarPreguntasRespuestas(texto) {\n\tconst lines = texto.split(\"\\n\");\n\tconst preguntasRespuestas = [];\n\n\tlet preguntaActual = null;\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst line = lines[i].trim();\n\n\t\tif (line.startsWith(\"?:\")) {\n\t\t\tpreguntaActual = {\n\t\t\t\tpregunta: line.substring(3), // Eliminar el prefijo '?:'\n\t\t\t\trespuestas: [],\n\t\t\t\trespuestasCorrectas: [],\n\t\t\t};\n\t\t\tpreguntasRespuestas.push(preguntaActual);\n\t\t} else if (line.startsWith(\"$\")) {\n\t\t\t// Es una respuesta correcta\n\t\t\tlet respuesta = line.substring(1); // Eliminar el prefijo '$'\n\t\t\trespuesta = respuesta.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n\t\t\tpreguntaActual.respuestas.push(respuesta);\n\t\t\tpreguntaActual.respuestasCorrectas.push(respuesta);\n\t\t} else if (\n\t\t\t// Respuesta normal\n\t\t\tline.startsWith(\"a.\") ||\n\t\t\tline.startsWith(\"b.\") ||\n\t\t\tline.startsWith(\"c.\") ||\n\t\t\tline.startsWith(\"d.\") ||\n\t\t\tline.startsWith(\"e.\") ||\n\t\t\tline.startsWith(\"f.\") ||\n\t\t\tline.startsWith(\"g.\")\n\t\t) {\n\t\t\tconst respuesta = line.substring(2); // Eliminar el prefijo 'a.', 'b.', 'c.', 'd.'\n\t\t\tpreguntaActual.respuestas.push(respuesta);\n\t\t}\n\t}\n\n\t// Desordenar el orden de las preguntas\n\tshuffleArray(preguntasRespuestas);\n\n\t// Desordenar las respuestas dentro de cada pregunta\n\tpreguntasRespuestas.forEach((pregunta) => {\n\t\tshuffleArray(pregunta.respuestas);\n\t});\n\n\t// Generar el nuevo objeto con las preguntas y respuestas desordenadas\n\tconst preguntasRespuestasDesordenadas = preguntasRespuestas.map(\n\t\t(pregunta, index) => {\n\t\t\tconst respuestasDesordenadas = pregunta.respuestas.map((respuesta, i) => {\n\t\t\t\tconst respuestaIndex = String.fromCharCode(97 + i); // Convierte el índice a su equivalente en caracteres (a, b, c, ...)\n\t\t\t\tconst esRespuestaCorrecta =\n\t\t\t\t\tpregunta.respuestasCorrectas.includes(respuesta);\n\t\t\t\treturn {\n\t\t\t\t\trespuesta: respuesta,\n\t\t\t\t\tesRespuestaCorrecta: esRespuestaCorrecta,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tpregunta: pregunta.pregunta,\n\t\t\t\trespuestas: respuestasDesordenadas,\n\t\t\t};\n\t\t}\n\t);\n\n\treturn preguntasRespuestasDesordenadas;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}